package org.amshove.natlint.natparse.lexing;

import java.util.Locale;

public class KeywordTable
{
	public static SyntaxKind getKeyword(String possibleKeyword)
	{
		String key = possibleKeyword.toLowerCase(Locale.ENGLISH);
		switch (key)
		{
			// operators
			case "eq":
				return SyntaxKind.EQ;
			case "ne":
				return SyntaxKind.NE;
			case "gt":
				return SyntaxKind.GT;
			case "ge":
				return SyntaxKind.GE;
			case "lt":
				return SyntaxKind.LT;
			case "le":
				return SyntaxKind.LE;

			// KCheck keywords
			case "abs":
				return SyntaxKind.ABS;
			case "accept":
				return SyntaxKind.ACCEPT;
			case "add":
				return SyntaxKind.ADD;
			case "all":
				return SyntaxKind.ALL;
			case "any":
				return SyntaxKind.ANY;
			case "assign":
				return SyntaxKind.ASSIGN;
			case "at":
				return SyntaxKind.AT;
			case "atn":
				return SyntaxKind.ATN;
			case "aver":
				return SyntaxKind.AVER;
			case "backout":
				return SyntaxKind.BACKOUT;
			case "before":
				return SyntaxKind.BEFORE;
			case "break":
				return SyntaxKind.BREAK;
			case "browse":
				return SyntaxKind.BROWSE;
			case "call":
				return SyntaxKind.CALL;
			case "calldbproc":
				return SyntaxKind.CALLDBPROC;
			case "callnat":
				return SyntaxKind.CALLNAT;
			case "close":
				return SyntaxKind.CLOSE;
			case "commit":
				return SyntaxKind.COMMIT;
			case "compose":
				return SyntaxKind.COMPOSE;
			case "compress":
				return SyntaxKind.COMPRESS;
			case "compute":
				return SyntaxKind.COMPUTE;
			case "copy":
				return SyntaxKind.COPY;
			case "cos":
				return SyntaxKind.COS;
			case "count":
				return SyntaxKind.COUNT;
			case "create":
				return SyntaxKind.CREATE;
			case "decide":
				return SyntaxKind.DECIDE;
			case "define":
				return SyntaxKind.DEFINE;
			case "delete":
				return SyntaxKind.DELETE;
			case "display":
				return SyntaxKind.DISPLAY;
			case "divide":
				return SyntaxKind.DIVIDE;
			case "dlogoff":
				return SyntaxKind.DLOGOFF;
			case "dlogon":
				return SyntaxKind.DLOGON;
			case "dnative":
				return SyntaxKind.DNATIVE;
			case "do":
				return SyntaxKind.DO;
			case "doend":
				return SyntaxKind.DOEND;
			case "download":
				return SyntaxKind.DOWNLOAD;
			case "eject":
				return SyntaxKind.EJECT;
			case "else":
				return SyntaxKind.ELSE;
			case "end":
				return SyntaxKind.END;
			case "end-all":
				return SyntaxKind.END_ALL;
			case "end-before":
				return SyntaxKind.END_BEFORE;
			case "end-break":
				return SyntaxKind.END_BREAK;
			case "end-browse":
				return SyntaxKind.END_BROWSE;
			case "end-decide":
				return SyntaxKind.END_DECIDE;
			case "end-enddata":
				return SyntaxKind.END_ENDDATA;
			case "end-endfile":
				return SyntaxKind.END_ENDFILE;
			case "end-endpage":
				return SyntaxKind.END_ENDPAGE;
			case "end-error":
				return SyntaxKind.END_ERROR;
			case "end-file":
				return SyntaxKind.END_FILE;
			case "end-find":
				return SyntaxKind.END_FIND;
			case "end-for":
				return SyntaxKind.END_FOR;
			case "end-histogram":
				return SyntaxKind.END_HISTOGRAM;
			case "endhoc":
				return SyntaxKind.ENDHOC;
			case "end-if":
				return SyntaxKind.END_IF;
			case "end-loop":
				return SyntaxKind.END_LOOP;
			case "end-norec":
				return SyntaxKind.END_NOREC;
			case "end-parse":
				return SyntaxKind.END_PARSE;
			case "end-process":
				return SyntaxKind.END_PROCESS;
			case "end-read":
				return SyntaxKind.END_READ;
			case "end-repeat":
				return SyntaxKind.END_REPEAT;
			case "end-result":
				return SyntaxKind.END_RESULT;
			case "end-select":
				return SyntaxKind.END_SELECT;
			case "end-sort":
				return SyntaxKind.END_SORT;
			case "end-start":
				return SyntaxKind.END_START;
			case "end-subroutine":
				return SyntaxKind.END_SUBROUTINE;
			case "end-toppage":
				return SyntaxKind.END_TOPPAGE;
			case "end-work":
				return SyntaxKind.END_WORK;
			case "entire":
				return SyntaxKind.ENTIRE;
			case "escape":
				return SyntaxKind.ESCAPE;
			case "examine":
				return SyntaxKind.EXAMINE;
			case "exp":
				return SyntaxKind.EXP;
			case "expand":
				return SyntaxKind.EXPAND;
			case "export":
				return SyntaxKind.EXPORT;
			case "false":
				return SyntaxKind.FALSE;
			case "fetch":
				return SyntaxKind.FETCH;
			case "find":
				return SyntaxKind.FIND;
			case "for":
				return SyntaxKind.FOR;
			case "format":
				return SyntaxKind.FORMAT;
			case "frac":
				return SyntaxKind.FRAC;
			case "get":
				return SyntaxKind.GET;
			case "histogram":
				return SyntaxKind.HISTOGRAM;
			case "if":
				return SyntaxKind.IF;
			case "ignore":
				return SyntaxKind.IGNORE;
			case "import":
				return SyntaxKind.IMPORT;
			case "inccont":
				return SyntaxKind.INCCONT;
			case "incdic":
				return SyntaxKind.INCDIC;
			case "incdir":
				return SyntaxKind.INCDIR;
			case "include":
				return SyntaxKind.INCLUDE;
			case "incmac":
				return SyntaxKind.INCMAC;
			case "input":
				return SyntaxKind.INPUT;
			case "insert":
				return SyntaxKind.INSERT;
			case "int":
				return SyntaxKind.INT;
			case "investigate":
				return SyntaxKind.INVESTIGATE;
			case "limit":
				return SyntaxKind.LIMIT;
			case "log":
				return SyntaxKind.LOG;
			case "loop":
				return SyntaxKind.LOOP;
			case "map":
				return SyntaxKind.MAP;
			case "max":
				return SyntaxKind.MAX;
			case "min":
				return SyntaxKind.MIN;
			case "move":
				return SyntaxKind.MOVE;
			case "multiply":
				return SyntaxKind.MULTIPLY;
			case "naver":
				return SyntaxKind.NAVER;
			case "ncount":
				return SyntaxKind.NCOUNT;
			case "newpage":
				return SyntaxKind.NEWPAGE;
			case "nmin":
				return SyntaxKind.NMIN;
			case "none":
				return SyntaxKind.NONE;
			case "null-handle":
				return SyntaxKind.NULL_HANDLE;
			case "obtain":
				return SyntaxKind.OBTAIN;
			case "old":
				return SyntaxKind.OLD;
			case "on":
				return SyntaxKind.ON;
			case "open":
				return SyntaxKind.OPEN;
			case "options":
				return SyntaxKind.OPTIONS;
			case "parse":
				return SyntaxKind.PARSE;
			case "passw":
				return SyntaxKind.PASSW;
			case "perform":
				return SyntaxKind.PERFORM;
			case "pos":
				return SyntaxKind.POS;
			case "print":
				return SyntaxKind.PRINT;
			case "process":
				return SyntaxKind.PROCESS;
			case "read":
				return SyntaxKind.READ;
			case "redefine":
				return SyntaxKind.REDEFINE;
			case "reduce":
				return SyntaxKind.REDUCE;
			case "reinput":
				return SyntaxKind.REINPUT;
			case "reject":
				return SyntaxKind.REJECT;
			case "release":
				return SyntaxKind.RELEASE;
			case "repeat":
				return SyntaxKind.REPEAT;
			case "request":
				return SyntaxKind.REQUEST;
			case "reset":
				return SyntaxKind.RESET;
			case "resize":
				return SyntaxKind.RESIZE;
			case "restore":
				return SyntaxKind.RESTORE;
			case "ret":
				return SyntaxKind.RET;
			case "retry":
				return SyntaxKind.RETRY;
			case "return":
				return SyntaxKind.RETURN;
			case "rollback":
				return SyntaxKind.ROLLBACK;
			case "rulevar":
				return SyntaxKind.RULEVAR;
			case "run":
				return SyntaxKind.RUN;
			case "select":
				return SyntaxKind.SELECT;
			case "send":
				return SyntaxKind.SEND;
			case "separate":
				return SyntaxKind.SEPARATE;
			case "set":
				return SyntaxKind.SET;
			case "settime":
				return SyntaxKind.SETTIME;
			case "sgn":
				return SyntaxKind.SGN;
			case "show":
				return SyntaxKind.SHOW;
			case "sin":
				return SyntaxKind.SIN;
			case "skip":
				return SyntaxKind.SKIP;
			case "sort":
				return SyntaxKind.SORT;
			case "sortkey":
				return SyntaxKind.SORTKEY;
			case "sqrt":
				return SyntaxKind.SQRT;
			case "stack":
				return SyntaxKind.STACK;
			case "start":
				return SyntaxKind.START;
			case "stop":
				return SyntaxKind.STOP;
			case "store":
				return SyntaxKind.STORE;
			case "substr":
				return SyntaxKind.SUBSTR;
			case "substring":
				return SyntaxKind.SUBSTRING;
			case "subtract":
				return SyntaxKind.SUBTRACT;
			case "sum":
				return SyntaxKind.SUM;
			case "suspend":
				return SyntaxKind.SUSPEND;
			case "tan":
				return SyntaxKind.TAN;
			case "terminate":
				return SyntaxKind.TERMINATE;
			case "top":
				return SyntaxKind.TOP;
			case "total":
				return SyntaxKind.TOTAL;
			case "transfer":
				return SyntaxKind.TRANSFER;
			case "true":
				return SyntaxKind.TRUE;
			case "until":
				return SyntaxKind.UNTIL;
			case "update":
				return SyntaxKind.UPDATE;
			case "upload":
				return SyntaxKind.UPLOAD;
			case "val":
				return SyntaxKind.VAL;
			case "value":
				return SyntaxKind.VALUE;
			case "values":
				return SyntaxKind.VALUES;
			case "waste":
				return SyntaxKind.WASTE;
			case "when":
				return SyntaxKind.WHEN;
			case "while":
				return SyntaxKind.WHILE;
			case "with_cte":
				return SyntaxKind.WITH_CTE;
			case "write":
				return SyntaxKind.WRITE;

			default:
				return null;
		}
	}
}
