DEFINE DATA
LOCAL
1 #MUTABLE (A10)
1 #C-CONST (A2) CONST<'AB'>

1 #N-MUTABLE (N12)
1 #C-N-CONST (N12) CONST<5>
1 #GIVING (N12)
1 #QUOTIENT (N12)
1 #REST (N12)
1 #ARR (N12/*)
END-DEFINE

/* NPP039: Mutability
/* NPP037: Type mismatch

SUBSTRING(#MUTABLE, 1, 5) := 'hello' /* okay, is mutable
COMPRESS 'Hi' INTO SUBSTRING(#C-CONST, 1, 1) /* !{D:ERROR:NPP039}

#MUTABLE := 'Hello' /* Okay, #MUTABLE is not const
#C-CONST := 'CD' /* !{D:ERROR:NPP039} this variable is const, this is not allowed

COMPRESS 'A' INTO #MUTABLE
COMPRESS 'A' INTO #C-CONST /* !{D:ERROR:NPP039}

ASSIGN #MUTABLE = 'A'
ASSIGN #C-CONST = 'A' /* !{D:ERROR:NPP039}

ADD 1 TO #N-MUTABLE
SUBTRACT 1 FROM #N-MUTABLE
DIVIDE 5 INTO #N-MUTABLE
MULTIPLY #N-MUTABLE BY 10

ADD 1 TO #C-N-CONST /* !{D:ERROR:NPP039}
SUBTRACT 1 FROM #C-N-CONST /* !{D:ERROR:NPP039}
DIVIDE 5 INTO #C-N-CONST /* !{D:ERROR:NPP039}
MULTIPLY #C-N-CONST BY 10 /* !{D:ERROR:NPP039}

*ERROR-NR := 5
*DATN := 10 /* !{D:ERROR:NPP039}
ASSIGN *PAGE-NUMBER(SV12) := 5

DIVIDE 2 INTO (#QUOTIENT + #REST) GIVING #QUOTIENT REMAINDER #REST /* when GIVING is present, INTO is not mutated
DIVIDE 2 INTO (#QUOTIENT + #REST) GIVING #C-N-CONST REMAINDER #REST /* !{D:ERROR:NPP039} GIVING needs to be mutable
DIVIDE 2 INTO (#QUOTIENT + #REST) GIVING #QUOTIENT REMAINDER #C-N-CONST /* !{D:ERROR:NPP039} REMAINDER needs to be mutable
MULTIPLY 4 BY #N-MUTABLE GIVING #GIVING /* when GIVING is present, lhs of BY is not mutated
SUBTRACT #N-MUTABLE FROM 11 GIVING #GIVING /* when GIVING is present, lhs of BY is not mutated

/* With REMAINDER, none of the operands is allowed to specify an array range
DIVIDE #ARR(*) INTO (#QUOTIENT + #REST) GIVING #QUOTIENT REMAINDER #REST /* !{D:ERROR:NPP037}
DIVIDE 2 INTO #ARR(*) GIVING #QUOTIENT REMAINDER #REST /* !{D:ERROR:NPP037}
DIVIDE 2 INTO (#QUOTIENT + #REST) GIVING #ARR(*) REMAINDER #REST /* !{D:ERROR:NPP037}
DIVIDE 2 INTO (#QUOTIENT + #REST) GIVING #QUOTIENT REMAINDER #ARR(*) /* !{D:ERROR:NPP037}

/* With REMAINDER, Array indexing is fine
DIVIDE #ARR(1) INTO (#QUOTIENT + #REST) GIVING #QUOTIENT REMAINDER #REST
DIVIDE 2 INTO #ARR(5) GIVING #QUOTIENT REMAINDER #REST
DIVIDE 2 INTO (#QUOTIENT + #REST) GIVING #ARR(2) REMAINDER #REST
DIVIDE 2 INTO (#QUOTIENT + #REST) GIVING #QUOTIENT REMAINDER #ARR(6)

END

