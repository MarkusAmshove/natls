// plugins {
//     id 'com.github.johnrengelman.shadow' version '7.1.0'
// }

dependencies {
    compileOnly libraries.sonarqube_api
    compileOnly libraries.slf4j_api
    implementation project(':natparse')
    implementation project(':natlint')

    testImplementation project(':testhelpers')
    testImplementation libraries.sonarqube_test_api
    testImplementation libraries.sonarqube_test_fixtures
}

tasks.withType(JavaCompile).configureEach {
    options.release.set(21)
}

configurations.testImplementation {
    exclude group: 'ch.qos.logback', module: 'logback-classic'
}

jar {
    manifest {
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")

        attributes(
                'Build-Time': buildDate,
                'Plugin-BuildDate': buildDate,
                'Plugin-ChildFirstClassLoader': 'false',
                'Plugin-Class': 'org.amshove.natqube.NaturalPlugin',
                'Plugin-Description': 'Natural language integration for SonarQube, featuring static code analasys',
                'Plugin-Developers': 'Markus Amshove',
                'Plugin-Display-Version': archiveVersion,
                'Plugin-Homepage': 'https://github.com/MarkusAmshove/NatLS',
                'Plugin-IssueTrackerUrl': 'https://github.com/MarkusAmshove/NatLS',
                'Plugin-Key': 'natural',
                'Plugin-License': 'MIT',
                'Plugin-Name': 'NatQube',
                'Plugin-SourcesUrl': 'https://github.com/MarkusAmshove/NatLS',
                'Plugin-Version': archiveVersion,
                'Sonar-Version': "${SONAR_VERSION}",
                'SonarLint-Supported': 'false',
                'Version': "${archiveVersion}",
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

// shadowJar {
//     setArchivesBaseName('natqube')
//     archiveClassifier.set('')
//     archiveVersion.set('')
//     exclude 'META-INF/**/*'
// }

// artifacts {
//     shadowJar
// }

compileJava.dependsOn(':ruletranslator:run')
