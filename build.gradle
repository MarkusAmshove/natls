plugins {
	id 'java-library'
    id 'jvm-test-suite'
	id 'org.sonarqube' version '6.2.0.5505'
	id 'com.diffplug.spotless' version '6.2.0'
    id 'signing'
    id 'com.vanniktech.maven.publish' version '0.34.0'
    id "com.github.ben-manes.versions" version "0.52.0"
}

ext {
	JAVA_VERSION = 21
	SLF4J_VERSION = '2.0.17'
    SONAR_VERSION = '9.9.1.69595'
    SONAR_API_VERSION = '10.1.0.809'
	libraries = [
		// Implementation
		guava : 'com.google.guava:guava:33.4.8-jre',
		lsp4j : 'org.eclipse.lsp4j:org.eclipse.lsp4j:0.24.0',
		dom4j : 'org.dom4j:dom4j:2.2.0',
		slf4j_api	: "org.slf4j:slf4j-api:${SLF4J_VERSION}",
		slf4j_simple : "org.slf4j:slf4j-simple:${SLF4J_VERSION}",
		slf4j_nop	: "org.slf4j:slf4j-nop:${SLF4J_VERSION}",
		slf4j_utillogging : "org.slf4j:slf4j-jdk14:${SLF4J_VERSION}",
		reflections  : 'org.reflections:reflections:0.10.2',
		picocli : 'info.picocli:picocli:4.7.7',
        sonarqube_api   : "org.sonarsource.api.plugin:sonar-plugin-api:${SONAR_API_VERSION}",
        sonarqube_test_fixtures : "org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures:${SONAR_API_VERSION}",
        sonarqube_test_api : "org.sonarsource.sonarqube:sonar-plugin-api-impl:${SONAR_VERSION}",
		// Test
		junit_jupiter : 'org.junit:junit-bom:5.8.2',
		assertJ : 'org.assertj:assertj-core:3.27.4',
		mockito : 'org.mockito:mockito-core:5.18.0',
		archUnit: 'com.tngtech.archunit:archunit:1.4.1',
        awaitility: 'org.awaitility:awaitility:4.3.0'
	]
}

spotless {
	format 'gradle', {
		target '.gradle'
		indentWithTabs()
	}
	java {
		target '**/src/*/java/**/*.java'
		toggleOffOn('"""', '"""')
		indentWithTabs()
		eclipse().configFile('EclipseFormatter.xml')
	}
}

allprojects {
	apply plugin: 'java-library'
	apply plugin: 'jacoco'

	group = 'org.amshove.natural'

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(JAVA_VERSION)
		}
	}

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

	tasks.withType(JavaCompile).configureEach {
		options.release.set(JAVA_VERSION)
	}

	repositories {
		mavenCentral()
	}

	javadoc.options.addStringOption('Xdoclint:none', '-quiet')
}


subprojects {
	dependencies {
		implementation libraries.guava

		testImplementation libraries.assertJ
		testImplementation(platform(libraries.junit_jupiter))
		testImplementation('org.junit.jupiter:junit-jupiter')
	}

    testing {
        suites {
            test {
                useJUnitJupiter()
            }

            configureEach {
                targets {
                    all {
                        testTask.configure {
                            testLogging {
                                events "skipped", "failed"
                                showStandardStreams = true
                                exceptionFormat = 'full'
                            }
                        }
                    }
                }
            }
        }
    }

	jacocoTestReport {
		reports {
			html.required = true
			xml.required = true
			csv.required = false
		}
	}
}

task cover(type: JacocoReport) {
	dependsOn = subprojects.test
	dependsOn += test

	additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
	sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
	classDirectories.setFrom files(subprojects.sourceSets.main.output)
	executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')

	reports {
		html.required = true
		xml.required = true
		csv.required = false
	}
}

task testReport(type: TestReport) {
	destinationDirectory = file("$buildDir/reports/allTests")
	testResults.from(subprojects.collect { it.tasks.withType(Test) })
}

sonarqube {
	properties {
		property "sonar.projectKey", "MarkusAmshove_natls"
		property "sonar.organization", "markusamshove"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.coverage.jacoco.xmlReportPaths', "${rootProject.buildDir}/reports/jacoco/cover/cover.xml"
		property 'sonar.coverage.exclusions', 'tools/**/*,libs/natlint/src/main/java/org/amshove/natlint/cli/sinks/*.*'
	}
}

project.tasks.getByPath('natlint:test').dependsOn(project.tasks.getByPath('natparse:test'))
project.tasks['sonarqube'].dependsOn cover
project.tasks['cover'].dependsOn spotlessJava
project.tasks['cover'].dependsOn spotlessGradle
